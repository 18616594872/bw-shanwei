(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["SuperMapCesium"] = factory();
	else
		root["SuperMapCesium"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 6);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.util = mod.exports;
  }
})(this, function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var checkType = exports.checkType = function checkType(val) {
    return Object.prototype.toString.call(val).slice(8, -1);
  };
  var toKebabCase = exports.toKebabCase = function toKebabCase(str) {
    return str.replace(/[A-Z]/g, function (letter) {
      return '-' + letter.toLowerCase();
    }).replace(/^-/, '');
  };
  var getDocumentByClassName = exports.getDocumentByClassName = function getDocumentByClassName(htmlCollection, className) {
    var temp = void 0;
    var BreakException = {};
    try {
      Array.prototype.slice.call(htmlCollection).forEach(function (element) {
        if (element.className === className) {
          temp = element;
          throw BreakException;
        }
      });
    } catch (e) {
      if (e !== BreakException) throw e;
    }
    return temp;
  };
});

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(8)(
  /* script */
  __webpack_require__(7),
  /* template */
  __webpack_require__(9),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "D:\\WebDemo\\01_Vue\\vue-supermap-cesium\\components\\cesium\\viewer.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] viewer.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-7905b500", Component.options)
  } else {
    hotAPI.reload("data-v-7905b500", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = {"name":"vue-supermap-cesium","version":"0.0.1","description":"Cesium Component for Vue 2.0","main":"index.js","scripts":{"build:docs":"webpack -p --config ./build/webpack.docs.config.js","build":"webpack --config ./build/webpack.prod.config.js","dev":"webpack-dev-server --content-base docs --config ./build/webpack.docs.config.js --hot --inline","test":"echo \"Error: no test specified\" && exit 1"},"keywords":["Vue","Cesium","SuperMap","WebGL"],"author":"zouyaoji","license":"MIT","devDependencies":{"babel-core":"^6.26.0","babel-eslint":"^7.2.3","babel-loader":"^6.2.10","babel-plugin-add-module-exports":"^0.2.1","babel-plugin-module-alias":"^1.6.0","babel-plugin-syntax-dynamic-import":"^6.18.0","babel-plugin-transform-es2015-modules-umd":"^6.24.0","babel-preset-es2015":"^6.18.0","bmaplib.distancetool":"^1.0.2","bulma":"^0.3.0","chai":"^4.0.2","css-loader":"^0.26.1","eslint":"^3.19.0","eslint-config-standard":"^10.2.1","eslint-loader":"^1.7.1","eslint-plugin-html":"^2.0.1","eslint-plugin-import":"^2.2.0","eslint-plugin-node":"^4.2.2","eslint-plugin-promise":"^3.5.0","eslint-plugin-standard":"^3.0.1","file-loader":"^0.10.0","github-markdown-css":"^2.4.1","html-webpack-plugin":"^2.26.0","inline-manifest-webpack-plugin":"^3.0.1","karma":"^1.7.0","karma-chrome-launcher":"^2.1.1","karma-coverage":"^1.1.1","karma-mocha":"^1.3.0","karma-webpack":"^2.0.3","material-design-icons":"^3.0.1","mocha":"^3.4.2","prismjs":"^1.6.0","pug":"^2.0.0-beta6","requirejs":"^2.3.3","rmdir":"^1.2.0","roboto-fontface":"^0.7.0","style-loader":"^0.13.1","stylus":"^0.54.5","stylus-loader":"^3.0.1","url-loader":"^0.5.7","vue":"^2.4.3","vue-loader":"^10.0.2","vue-markdown-loader":"^0.6.2","vue-material":"^0.7.4","vue-router":"^2.7.0","vue-template-compiler":"^2.1.8","webpack":"^2.4.1","webpack-dev-server":"^2.4.4"},"peerDependencies":{"vue":"^2.1.8"},"dependencies":{"bmaplib.curveline":"^1.0.0","bmaplib.heatmap":"^1.0.4","bmaplib.lushu":"^1.0.7","bmaplib.markerclusterer":"^1.0.13","markdown-it":"^8.4.0"}}

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, exports, __webpack_require__(4), __webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (typeof exports !== "undefined") {
    factory(module, exports, require('./events.js'), require('./util.js'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, mod.exports, global.events, global.util);
    global.bindEvent = mod.exports;
  }
})(this, function (module, exports, _events, _util) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  exports.default = function (instance, eventList) {
    var _this = this;

    var ev = eventList || _events2.default[(0, _util.toKebabCase)(this.$options._componentTag)];
    ev && ev.forEach(function (event) {
      var hasOn = event.slice(0, 2) === 'on';
      instance[event].addEventListener(function (arg) {
        _this.$emit(hasOn ? event.slice(2) : event, arg);
      });
      // instance[event].addEventListener(
      //   (function (me) {
      //     return function (e) {
      //       console.log(this, me)
      //       me.$emit(hasOn ? event.slice(2) : event, e)
      //     }
      //   }
      //   )(this))
    });
  };

  var _events2 = _interopRequireDefault(_events);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  module.exports = exports['default'];
});

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (typeof exports !== "undefined") {
    factory(module, exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, mod.exports);
    global.events = mod.exports;
  }
})(this, function (module, exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = {
    'sm-viewer': ['selectedEntityChanged', 'trackedEntityChanged'],
    'sm-cesiumWidget': ['morphComplete', 'morphStart', 'postRender', 'preRender', 'preUpdate', 'renderError', 'terrainProviderChanged']
  };
  module.exports = exports['default'];
});

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.providerViewModels = mod.exports;
  }
})(this, function (exports) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var createDefaultImageryProviderViewModels = exports.createDefaultImageryProviderViewModels = function createDefaultImageryProviderViewModels(Cesium, cesiumPath) {
    var providerViewModels = [];

    // localImage
    providerViewModels.push(new Cesium.ProviderViewModel({
      name: '本地图片',
      iconUrl: cesiumPath + 'Widgets/Images/ImageryProviders/bingAerial.png',
      tooltip: '本地图片',
      creationFunction: function creationFunction() {
        return new Cesium.SingleTileImageryProvider({
          url: cesiumPath + 'Assets/Textures/GlobalBkLayer.jpg'
        });
      }
    }));

    if (Cesium.defined(Cesium.SuperMapImageryProvider)) {
      providerViewModels.push(new Cesium.ProviderViewModel({
        name: '天地图全球影像地图服务',
        iconUrl: cesiumPath + 'Widgets/Images/ImageryProviders/bingAerial.png',
        tooltip: '天地图全球影像地图服务',
        creationFunction: function creationFunction() {
          return new Cesium.TiandituImageryProvider({
            credit: new Cesium.Credit('天地图全球影像地图服务 \n 数据来源：国家地理信息公共服务平台 & 四川省测绘地理信息局')
          });
        }
      }));

      providerViewModels.push(new Cesium.ProviderViewModel({
        name: '天地图全球矢量地图服务',
        iconUrl: cesiumPath + 'Widgets/Images/ImageryProviders/bingAerial.png',
        tooltip: '天地图全球矢量地图服务',
        creationFunction: function creationFunction() {
          return new Cesium.TiandituImageryProvider({
            credit: new Cesium.Credit('天地图全球矢量地图服务 \n 数据来源：国家地理信息公共服务平台 & 四川省测绘地理信息局'),
            mapStyle: Cesium.TiandituMapsStyle.VEC_C
          });
        }
      }));
    } else {
      providerViewModels.push(new Cesium.ProviderViewModel({
        name: '天地图全球影像服务',
        iconUrl: cesiumPath + 'Widgets/Images/ImageryProviders/bingAerial.png',
        tooltip: '全球天地图影像服务',
        creationFunction: function creationFunction() {
          return new Cesium.WebMapTileServiceImageryProvider({
            url: 'http://t0.tianditu.com/img_c/wmts?service=WMTS&version=1.0.0&request=GetTile&tilematrix={TileMatrix}&layer=img&style={style}&tilerow={TileRow}&tilecol={TileCol}&tilematrixset={TileMatrixSet}&format=tiles',
            layer: 'img',
            style: 'default',
            format: 'tiles',
            tileMatrixSetID: 'c',
            credit: new Cesium.Credit('天地图全球影像服务。 \n 数据来源：国家地理信息公共服务平台 & 四川省测绘地理信息局'),
            subdomains: ['t0', 't1', 't2', 't3', 't4', 't5', 't6', 't7'],
            maximumLevel: 20,
            tilingScheme: new Cesium.GeographicTilingScheme(),
            tileMatrixLabels: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19']
          });
        }
      }));
    }

    providerViewModels.push(new Cesium.ProviderViewModel({
      name: '高德影像',
      iconUrl: cesiumPath + 'Widgets/Images/ImageryProviders/bingAerial.png',
      tooltip: '高德影像',
      creationFunction: function creationFunction() {
        return createAMapByUrl(Cesium);
      }
    }));

    providerViewModels.push(new Cesium.ProviderViewModel({
      name: '高德矢量',
      iconUrl: cesiumPath + 'Widgets/Images/ImageryProviders/bingAerial.png',
      tooltip: '高德矢量',
      creationFunction: function creationFunction() {
        return createAMapByUrl(Cesium, {
          url: 'http://webst01.is.autonavi.com/appmaptile?style=7&x={x}&y={y}&z={z}'
        });
      }
    }));

    // providerViewModels.push(
    //   new Cesium.ProviderViewModel({
    //     name: '高德道路',
    //     iconUrl: `${cesiumPath}Widgets/Images/ImageryProviders/bingAerial.png`,
    //     tooltip: '高德道路',
    //     creationFunction: function () {
    //       return createAMapByUrl(Cesium, {
    //         url:
    //           'http://wprd04.is.autonavi.com/appmaptile?x={x}&y={y}&z={z}&lang=zh_cn&size=1&scl=1&style=8&ltype=11'
    //       })
    //     }
    //   })
    // )

    // providerViewModels.push(
    //   new Cesium.ProviderViewModel({
    //     name: '高德文字',
    //     iconUrl: `${cesiumPath}Widgets/Images/ImageryProviders/bingAerial.png`,
    //     tooltip: '高德文字',
    //     creationFunction: function () {
    //       return createAMapByUrl(Cesium, {
    //         url:
    //           'http://wprd04.is.autonavi.com/appmaptile?x={x}&y={y}&z={z}&lang=zh_cn&size=1&scl=1&style=8&ltype=12'
    //       })
    //     }
    //   })
    // )

    providerViewModels.push(new Cesium.ProviderViewModel({
      name: '百度地图服务',
      iconUrl: cesiumPath + 'Widgets/Images/ImageryProviders/bingAerial.png',
      tooltip: '百度地图服务',
      creationFunction: function creationFunction() {
        return new BDImageryProvider();
      }
    }));

    providerViewModels.push(new Cesium.ProviderViewModel({
      name: 'Bing Maps Aerial',
      iconUrl: cesiumPath + 'Widgets/Images/ImageryProviders/bingAerial.png',
      tooltip: 'Bing Maps aerial imagery \nhttp://www.bing.com/maps',
      creationFunction: function creationFunction() {
        return new Cesium.BingMapsImageryProvider({
          url: 'https://dev.virtualearth.net',
          mapStyle: Cesium.BingMapsStyle.AERIAL
        });
      }
    }));

    providerViewModels.push(new Cesium.ProviderViewModel({
      name: 'Bing Maps Aerial with Labels',
      iconUrl: cesiumPath + 'Widgets/Images/ImageryProviders/bingAerialLabels.png',
      tooltip: 'Bing Maps aerial imagery with label overlays \nhttp://www.bing.com/maps',
      creationFunction: function creationFunction() {
        return new Cesium.BingMapsImageryProvider({
          url: 'https://dev.virtualearth.net',
          mapStyle: Cesium.BingMapsStyle.AERIAL_WITH_LABELS
        });
      }
    }));

    providerViewModels.push(new Cesium.ProviderViewModel({
      name: 'Bing Maps Roads',
      iconUrl: cesiumPath + 'Widgets/Images/ImageryProviders/bingRoads.png',
      tooltip: 'Bing Maps standard road maps\nhttp://www.bing.com/maps',
      creationFunction: function creationFunction() {
        return new Cesium.BingMapsImageryProvider({
          url: 'https://dev.virtualearth.net',
          mapStyle: Cesium.BingMapsStyle.ROAD
        });
      }
    }));

    providerViewModels.push(new Cesium.ProviderViewModel({
      name: 'Mapbox Satellite',
      tooltip: 'Mapbox satellite imagery https://www.mapbox.com/maps/',
      iconUrl: cesiumPath + 'Widgets/Images/ImageryProviders/mapboxSatellite.png',
      creationFunction: function creationFunction() {
        return new Cesium.MapboxImageryProvider({
          mapId: 'mapbox.satellite'
        });
      }
    }));

    providerViewModels.push(new Cesium.ProviderViewModel({
      name: 'Mapbox Streets',
      tooltip: 'Mapbox streets imagery https://www.mapbox.com/maps/',
      iconUrl: cesiumPath + 'Widgets/Images/ImageryProviders/mapboxTerrain.png',
      creationFunction: function creationFunction() {
        return new Cesium.MapboxImageryProvider({
          mapId: 'mapbox.streets'
        });
      }
    }));

    providerViewModels.push(new Cesium.ProviderViewModel({
      name: 'ESRI World Imagery',
      iconUrl: cesiumPath + 'Widgets/Images/ImageryProviders/esriWorldImagery.png',
      tooltip: 'World Imagery provides one meter or better satellite and aerial imagery in many parts of the world and lower resolution satellite imagery worldwide.  The map includes NASA Blue Marble: Next Generation 500m resolution imagery at small scales (above 1:1,000,000), i-cubed 15m eSAT imagery at medium-to-large scales (down to 1:70,000) for the world, and USGS 15m Landsat imagery for Antarctica. The map features 0.3m resolution imagery in the continental United States and 0.6m resolution imagery in parts of Western Europe from DigitalGlobe. In other parts of the world, 1 meter resolution imagery is available from GeoEye IKONOS, i-cubed Nationwide Prime, Getmapping, AeroGRID, IGN Spain, and IGP Portugal.  Additionally, imagery at different resolutions has been contributed by the GIS User Community.\nhttp://www.esri.com',
      creationFunction: function creationFunction() {
        return new Cesium.ArcGisMapServerImageryProvider({
          url: 'https://services.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer',
          enablePickFeatures: false
        });
      }
    }));

    providerViewModels.push(new Cesium.ProviderViewModel({
      name: 'ESRI World Street Map',
      iconUrl: cesiumPath + 'Widgets/Images/ImageryProviders/esriWorldStreetMap.png',
      tooltip: 'This worldwide street map presents highway-level data for the world. Street-level data includes the United States; much of Canada; Japan; most countries in Europe; Australia and New Zealand; India; parts of South America including Argentina, Brazil, Chile, Colombia, and Venezuela; Ghana; and parts of southern Africa including Botswana, Lesotho, Namibia, South Africa, and Swaziland.\nhttp://www.esri.com',
      creationFunction: function creationFunction() {
        return new Cesium.ArcGisMapServerImageryProvider({
          url: 'https://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer',
          enablePickFeatures: false
        });
      }
    }));

    providerViewModels.push(new Cesium.ProviderViewModel({
      name: 'ESRI National Geographic',
      iconUrl: cesiumPath + 'Widgets/Images/ImageryProviders/esriNationalGeographic.png',
      tooltip: 'This web map contains the National Geographic World Map service. This map service is designed to be used as a general reference map for informational and educational purposes as well as a basemap by GIS professionals and other users for creating web maps and web mapping applications.\nhttp://www.esri.com',
      creationFunction: function creationFunction() {
        return new Cesium.ArcGisMapServerImageryProvider({
          url: 'https://services.arcgisonline.com/ArcGIS/rest/services/NatGeo_World_Map/MapServer/',
          enablePickFeatures: false
        });
      }
    }));

    providerViewModels.push(new Cesium.ProviderViewModel({
      name: 'Open\xADStreet\xADMap',
      iconUrl: cesiumPath + 'Widgets/Images/ImageryProviders/openStreetMap.png',
      tooltip: 'OpenStreetMap (OSM) is a collaborative project to create a free editable map of the world.\nhttp://www.openstreetmap.org',
      creationFunction: function creationFunction() {
        return Cesium.createOpenStreetMapImageryProvider({
          url: 'https://a.tile.openstreetmap.org/'
        });
      }
    }));

    providerViewModels.push(new Cesium.ProviderViewModel({
      name: 'Stamen Watercolor',
      iconUrl: cesiumPath + 'Widgets/Images/ImageryProviders/stamenWatercolor.png',
      tooltip: 'Reminiscent of hand drawn maps, Stamen watercolor maps apply raster effect area washes and organic edges over a paper texture to add warm pop to any map.\nhttp://maps.stamen.com',
      creationFunction: function creationFunction() {
        return Cesium.createOpenStreetMapImageryProvider({
          url: 'https://stamen-tiles.a.ssl.fastly.net/watercolor/',
          credit: 'Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under CC BY SA.'
        });
      }
    }));

    providerViewModels.push(new Cesium.ProviderViewModel({
      name: 'Stamen Toner',
      iconUrl: cesiumPath + 'Widgets/Images/ImageryProviders/stamenToner.png',
      tooltip: 'A high contrast black and white map.\nhttp://maps.stamen.com',
      creationFunction: function creationFunction() {
        return Cesium.createOpenStreetMapImageryProvider({
          url: 'https://stamen-tiles.a.ssl.fastly.net/toner/',
          credit: 'Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under CC BY SA.'
        });
      }
    }));

    providerViewModels.push(new Cesium.ProviderViewModel({
      name: 'The Black Marble',
      iconUrl: cesiumPath + 'Widgets/Images/ImageryProviders/blackMarble.png',
      tooltip: 'The lights of cities and villages trace the outlines of civilization in this global view of the Earth at night as seen by NASA/NOAA\'s Suomi NPP satellite.',
      creationFunction: function creationFunction() {
        return Cesium.createTileMapServiceImageryProvider({
          url: 'https://cesiumjs.org/blackmarble',
          flipXY: true,
          credit: 'Black Marble imagery courtesy NASA Earth Observatory'
        });
      }
    }));

    providerViewModels.push(new Cesium.ProviderViewModel({
      name: 'Natural Earth\xA0II',
      iconUrl: cesiumPath + 'Widgets/Images/ImageryProviders/naturalEarthII.png',
      tooltip: 'Natural Earth II, darkened for contrast.\nhttp://www.naturalearthdata.com/',
      creationFunction: function creationFunction() {
        return Cesium.createTileMapServiceImageryProvider({
          url: cesiumPath + 'Assets/Textures/NaturalEarthII'
        });
      }
    }));

    function BDImageryProvider(options) {
      this._url = 'http://online1.map.bdimg.com/onlinelabel/?qt=tile';

      this._tileWidth = 256;
      this._tileHeight = 256;
      this._maximumLevel = 18;

      var rectangleSouthwestInMeters = new Cesium.Cartesian2(-25165824, -25165824);
      var rectangleNortheastInMeters = new Cesium.Cartesian2(25165824, 25165824);
      this._tilingScheme = new Cesium.WebMercatorTilingScheme({
        rectangleSouthwestInMeters: rectangleSouthwestInMeters,
        rectangleNortheastInMeters: rectangleNortheastInMeters
      });

      // var rectangleSouthwestInMeters = new Cesium.Cartesian2(-25165824, -25165824);
      // var rectangleNortheastInMeters = new Cesium.Cartesian2(25165824, 25165824);
      // this._tilingScheme = new Cesium.WebMercatorTilingScheme();

      this._credit = undefined;
      this._rectangle = this._tilingScheme.rectangle;
      this._ready = true;
    }

    function buildImageUrl(imageryProvider, x, y, level) {
      var url = imageryProvider._url + '&x={x}&y={y}&z={z}';
      var tileW = imageryProvider._tilingScheme.getNumberOfXTilesAtLevel(level);
      var tileH = imageryProvider._tilingScheme.getNumberOfYTilesAtLevel(level);

      url = url.replace('{x}', x - tileW / 2).replace('{y}', tileH / 2 - y).replace('{z}', level);

      return url;
    }

    Cesium.defineProperties(BDImageryProvider.prototype, {
      url: {
        get: function get() {
          return this._url;
        }
      },

      token: {
        get: function get() {
          return this._token;
        }
      },

      proxy: {
        get: function get() {
          return this._proxy;
        }
      },

      tileWidth: {
        get: function get() {
          // >>includeStart('debug', pragmas.debug);
          if (!this._ready) {
            throw new Cesium.DeveloperError('tileWidth must not be called before the imagery provider is ready.');
          }
          // >>includeEnd('debug');

          return this._tileWidth;
        }
      },

      tileHeight: {
        get: function get() {
          // >>includeStart('debug', pragmas.debug);
          if (!this._ready) {
            throw new Cesium.DeveloperError('tileHeight must not be called before the imagery provider is ready.');
          }
          // >>includeEnd('debug');

          return this._tileHeight;
        }
      },

      maximumLevel: {
        get: function get() {
          // >>includeStart('debug', pragmas.debug);
          if (!this._ready) {
            throw new Cesium.DeveloperError('maximumLevel must not be called before the imagery provider is ready.');
          }
          // >>includeEnd('debug');

          return this._maximumLevel;
        }
      },

      minimumLevel: {
        get: function get() {
          // >>includeStart('debug', pragmas.debug);
          if (!this._ready) {
            throw new Cesium.DeveloperError('minimumLevel must not be called before the imagery provider is ready.');
          }
          // >>includeEnd('debug');

          return 0;
        }
      },

      tilingScheme: {
        get: function get() {
          // >>includeStart('debug', pragmas.debug);
          if (!this._ready) {
            throw new Cesium.DeveloperError('tilingScheme must not be called before the imagery provider is ready.');
          }
          // >>includeEnd('debug');

          return this._tilingScheme;
        }
      },

      rectangle: {
        get: function get() {
          // >>includeStart('debug', pragmas.debug);
          if (!this._ready) {
            throw new Cesium.DeveloperError('rectangle must not be called before the imagery provider is ready.');
          }
          // >>includeEnd('debug');

          return this._rectangle;
        }
      },

      tileDiscardPolicy: {
        get: function get() {
          // >>includeStart('debug', pragmas.debug);
          if (!this._ready) {
            throw new Cesium.DeveloperError('tileDiscardPolicy must not be called before the imagery provider is ready.');
          }
          // >>includeEnd('debug');

          return this._tileDiscardPolicy;
        }
      },

      errorEvent: {
        get: function get() {
          return this._errorEvent;
        }
      },

      ready: {
        get: function get() {
          return this._ready;
        }
      },

      readyPromise: {
        get: function get() {
          return this._readyPromise.promise;
        }
      },

      credit: {
        get: function get() {
          return this._credit;
        }
      },

      usingPrecachedTiles: {
        get: function get() {
          return this._useTiles;
        }
      },

      hasAlphaChannel: {
        get: function get() {
          return true;
        }
      },

      layers: {
        get: function get() {
          return this._layers;
        }
      }
    });

    BDImageryProvider.prototype.getTileCredits = function (x, y, level) {
      return undefined;
    };

    BDImageryProvider.prototype.requestImage = function (x, y, level) {
      if (!this._ready) {
        throw new Cesium.DeveloperError('requestImage must not be called before the imagery provider is ready.');
      }

      var url = buildImageUrl(this, x, y, level);
      return Cesium.ImageryProvider.loadImage(this, url);
    };

    return providerViewModels;
  };

  // Terrain
  var createDefaultTerrainProviderViewModels = exports.createDefaultTerrainProviderViewModels = function createDefaultTerrainProviderViewModels(Cesium, cesiumPath) {
    var providerViewModels = [];
    providerViewModels.push(new Cesium.ProviderViewModel({
      name: 'WGS84 Ellipsoid',
      iconUrl: cesiumPath + 'Widgets/Images/TerrainProviders/Ellipsoid.png',
      tooltip: 'WGS84 standard ellipsoid, also known as EPSG:4326',
      creationFunction: function creationFunction() {
        return new Cesium.EllipsoidTerrainProvider();
      }
    }));

    providerViewModels.push(new Cesium.ProviderViewModel({
      name: 'STK World Terrain meshes',
      iconUrl: cesiumPath + 'Widgets/Images/TerrainProviders/STK.png',
      tooltip: 'High-resolution, mesh-based terrain for the entire globe. Free for use on the Internet. Closed-network options are available.\nhttp://www.agi.com',
      creationFunction: function creationFunction() {
        return new Cesium.CesiumTerrainProvider({
          url: 'https://assets.agi.com/stk-terrain/v1/tilesets/world/tiles',
          requestWaterMask: true,
          requestVertexNormals: true
        });
      }
    }));

    return providerViewModels;
  };

  function createAMapByUrl(Cesium, options) {
    options = Cesium.defaultValue(options, {});

    var templateUrl = Cesium.defaultValue(options.url, 'http://webst01.is.autonavi.com/appmaptile?style=6&x={x}&y={y}&z={z}');

    // var trailingSlashRegex = /\/$/
    var defaultCredit = new Cesium.Credit('AMap');

    var tilingScheme = new Cesium.WebMercatorTilingScheme({
      ellipsoid: options.ellipsoid
    });

    var tileWidth = 256;
    var tileHeight = 256;

    var minimumLevel = Cesium.defaultValue(options.minimumLevel, 0);
    var maximumLevel = Cesium.defaultValue(options.minimumLevel, 18);

    var rectangle = Cesium.defaultValue(options.rectangle, tilingScheme.rectangle);

    // Check the number of tiles at the minimum level.  If it's more than four,
    // throw an exception, because starting at the higher minimum
    // level will cause too many tiles to be downloaded and rendered.
    var swTile = tilingScheme.positionToTileXY(Cesium.Rectangle.southwest(rectangle), minimumLevel);
    var neTile = tilingScheme.positionToTileXY(Cesium.Rectangle.northeast(rectangle), minimumLevel);
    var tileCount = (Math.abs(neTile.x - swTile.x) + 1) * (Math.abs(neTile.y - swTile.y) + 1);
    // >>includeStart('debug', pragmas.debug);
    if (tileCount > 4) {
      throw new Cesium.DeveloperError('The rectangle and minimumLevel indicate that there are ' + tileCount + ' tiles at the minimum level. Imagery providers with more than four tiles at the minimum level are not supported.');
    }
    // >>includeEnd('debug');

    var credit = Cesium.defaultValue(options.credit, defaultCredit);
    if (typeof credit === 'string') {
      credit = new Cesium.Credit(credit);
    }

    return new Cesium.UrlTemplateImageryProvider({
      url: templateUrl,
      proxy: options.proxy,
      credit: credit,
      tilingScheme: tilingScheme,
      tileWidth: tileWidth,
      tileHeight: tileHeight,
      minimumLevel: minimumLevel,
      maximumLevel: maximumLevel,
      rectangle: rectangle
    });
  }
});

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(2), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (typeof exports !== "undefined") {
    factory(exports, require('../package.json'), require('./cesium/viewer.vue'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global._package, global.viewer);
    global.index = mod.exports;
  }
})(this, function (exports, _package, _viewer) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.SmViewer = undefined;

  var _viewer2 = _interopRequireDefault(_viewer);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = {
    install: function install(Vue, options) {
      var cesiumPath = options.cesiumPath;

      Vue.prototype._Cesium = function () {
        return { cesiumPath: cesiumPath };
      };
      Vue.component('sm-viewer', _viewer2.default);
    },

    version: _package.version
  };
  exports.SmViewer = _viewer2.default;
});

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, exports, __webpack_require__(3), __webpack_require__(0), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (typeof exports !== "undefined") {
    factory(module, exports, require('../base/bindEvent'), require('../base/util'), require('../base/providerViewModels'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, mod.exports, global.bindEvent, global.util, global.providerViewModels);
    global.viewer = mod.exports;
  }
})(this, function (module, exports, _bindEvent, _util, _providerViewModels) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _bindEvent2 = _interopRequireDefault(_bindEvent);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  exports.default = {
    name: 'sm-viewer',
    props: {
      cesiumPath: {
        type: String
      },
      animation: {
        type: Boolean,
        default: false
      },
      baseLayerPicker: {
        type: Boolean,
        default: false
      },
      fullscreenButton: {
        type: Boolean,
        default: false
      },
      vrButton: {
        type: Boolean,
        default: false
      },
      geocoder: {
        type: Boolean,
        default: false
      },
      homeButton: {
        type: Boolean,
        default: false
      },
      infoBox: {
        type: Boolean,
        default: true
      },
      sceneModePicker: {
        type: Boolean,
        default: false
      },
      selectionIndicator: {
        type: Boolean,
        default: true
      },
      timeline: {
        type: Boolean,
        default: false
      },
      navigationHelpButton: {
        type: Boolean,
        default: false
      },
      navigationInstructionsInitiallyVisible: {
        type: Boolean,
        default: false
      },
      scene3DOnly: {
        type: Boolean,
        default: false
      },
      shouldAnimate: {
        type: Boolean,
        default: false
      },
      clockViewModel: {
        type: Object
      },
      selectedImageryProviderViewModel: {
        type: Object
      },
      imageryProviderViewModels: {
        type: Object
      },
      selectedTerrainProviderViewModel: {
        type: Object
      },
      terrainProviderViewModels: {
        type: Object
      },
      imageryProvider: {
        type: Object
      },
      terrainProvider: {
        type: Object
      },
      skyBox: {
        type: Object
      },
      skyAtmosphere: {
        type: Object
      },
      fullscreenElement: {
        type: String
      },
      useDefaultRenderLoop: {
        type: Boolean,
        default: true
      },
      targetFrameRate: {
        type: Number
      },
      showRenderLoopErrors: {
        type: Boolean,
        default: true
      },
      automaticallyTrackDataSourceClocks: {
        type: Boolean,
        default: true
      },
      contextOptions: {
        type: Object
      },
      sceneMode: {
        type: Number,
        default: 3
      },
      mapProjection: {
        type: Object
      },
      globe: {
        type: Object
      },
      orderIndependentTranslucency: {
        type: Boolean,
        default: true
      },
      creditContainer: {
        type: String
      },
      creditViewport: {
        type: String
      },
      dataSources: {
        type: Object
      },
      terrainExaggeration: {
        type: Number,
        default: 1.0
      },
      shadows: {
        type: Boolean,
        default: false
      },
      terrainShadows: {
        type: Number
        // default: Cesium.ShadowMode.RECEIVE_ONLY
      },
      mapMode2D: {
        type: Number
        // default: Cesium.MapMode2D.INFINITE_SCROLL
      },
      projectionPicker: {
        type: Boolean,
        default: false
      },
      requestRenderMode: {
        type: Boolean,
        default: false
      },
      maximumRenderTimeChange: {
        type: Number,
        default: 0.0
      },
      navigation: {
        type: Boolean,
        default: false
      },
      camera: {
        type: Object
      }
    },
    watch: {
      selectionIndicator: function selectionIndicator(val) {
        var Cesium = this.Cesium,
            viewer = this.viewer,
            viewerContainer = this.viewerContainer;

        if (Cesium.defined(viewer.selectionIndicator) && !viewer.selectionIndicator.isDestroyed() && !val) {
          viewer.selectionIndicator.destroy();
          viewer._selectionIndicator = undefined;
          var selectionIndicatorContainer = (0, _util.getDocumentByClassName)(viewerContainer.children, 'cesium-viewer-selectionIndicatorContainer');
          viewerContainer.removeChild(selectionIndicatorContainer);
        } else if (!Cesium.defined(viewer.selectionIndicator) || viewer.selectionIndicator.isDestroyed()) {
          var _selectionIndicatorContainer = document.createElement('div');
          _selectionIndicatorContainer.className = 'cesium-viewer-selectionIndicatorContainer';
          viewerContainer.appendChild(_selectionIndicatorContainer);
          var selectionIndicator = new Cesium.SelectionIndicator(_selectionIndicatorContainer, viewer.scene);
          viewer._selectionIndicator = selectionIndicator;
        }
      },
      infoBox: function infoBox(val) {
        var Cesium = this.Cesium,
            viewer = this.viewer,
            viewerContainer = this.viewerContainer,
            resizeControl = this.resizeControl;

        if (Cesium.defined(viewer.infoBox) && !viewer.infoBox.isDestroyed() && !val) {
          viewer.infoBox.destroy();
          viewer._infoBox = undefined;
          var infoBoxContainer = (0, _util.getDocumentByClassName)(viewerContainer.children, 'cesium-viewer-infoBoxContainer');
          viewerContainer.removeChild(infoBoxContainer);
        } else if (!Cesium.defined(viewer.infoBox) || viewer.infoBox.isDestroyed()) {
          var _infoBoxContainer = document.createElement('div');
          _infoBoxContainer.className = 'cesium-viewer-infoBoxContainer';
          viewerContainer.appendChild(_infoBoxContainer);
          var infoBox = new Cesium.InfoBox(_infoBoxContainer);
          var infoBoxViewModel = infoBox.viewModel;
          viewer._eventHelper.add(infoBoxViewModel.cameraClicked, viewer._onInfoBoxCameraClicked, viewer);
          viewer._eventHelper.add(infoBoxViewModel.closeClicked, viewer._onInfoBoxClockClicked, viewer);
          viewer._infoBox = infoBox;
          resizeControl();
        }
      },
      geocoder: function geocoder(val) {
        var Cesium = this.Cesium,
            viewer = this.viewer,
            resizeToolbar = this.resizeToolbar;

        var toolbar = (0, _util.getDocumentByClassName)(viewer.container.firstChild.children, 'cesium-viewer-toolbar');
        if (Cesium.defined(viewer.geocoder) && !viewer.geocoder.isDestroyed() && !val) {
          viewer.geocoder.destroy();
          viewer._geocoder = undefined;
          var geocoderContainer = (0, _util.getDocumentByClassName)(toolbar.children, 'cesium-viewer-geocoderContainer');
          toolbar.removeChild(geocoderContainer);
        } else if (!Cesium.defined(viewer.geocoder) || viewer.geocoder.isDestroyed()) {
          var _geocoderContainer = document.createElement('div');
          _geocoderContainer.className = 'cesium-viewer-geocoderContainer';
          toolbar.appendChild(_geocoderContainer);
          var geocoder = new Cesium.Geocoder({
            container: _geocoderContainer,
            geocoderServices: Cesium.defined(this.geocoder) ? Cesium.isArray(this.geocoder) ? this.geocoder : [this.geocoder] : undefined,
            scene: viewer.scene,
            viewer: viewer
          });
          viewer._eventHelper.add(geocoder.viewModel.search.beforeExecute, viewer._clearObjects, viewer);
          viewer._geocoder = geocoder;
          resizeToolbar(toolbar, _geocoderContainer);
        }
      },
      homeButton: function homeButton(val) {
        var Cesium = this.Cesium,
            viewer = this.viewer,
            resizeToolbar = this.resizeToolbar;

        var toolbar = (0, _util.getDocumentByClassName)(viewer.container.firstChild.children, 'cesium-viewer-toolbar');
        if (Cesium.defined(viewer.homeButton) && !viewer.homeButton.isDestroyed() && !val) {
          viewer.homeButton.destroy();
          viewer._homeButton = undefined;
        } else if (!Cesium.defined(viewer.homeButton) || viewer.homeButton.isDestroyed()) {
          var homeButton = new Cesium.HomeButton(toolbar, viewer.scene);
          if (Cesium.defined(viewer.geocoder)) {
            viewer._eventHelper.add(homeButton.viewModel.command.afterExecute, function () {
              var viewModel = viewer.geocoder.viewModel;
              viewModel.searchText = '';
              if (viewModel.isSearchInProgress) {
                viewModel.search();
              }
            });
          }
          viewer._eventHelper.add(homeButton.viewModel.command.beforeExecute, viewer._clearTrackedObject, viewer);
          viewer._homeButton = homeButton;
          resizeToolbar(toolbar, homeButton);
        }
      },
      sceneModePicker: function sceneModePicker(val) {
        var Cesium = this.Cesium,
            viewer = this.viewer,
            resizeToolbar = this.resizeToolbar;

        var toolbar = (0, _util.getDocumentByClassName)(viewer.container.firstChild.children, 'cesium-viewer-toolbar');
        if (Cesium.defined(viewer.sceneModePicker) && !viewer.sceneModePicker.isDestroyed() && !val) {
          viewer.sceneModePicker.destroy();
          viewer._sceneModePicker = undefined;
        } else if (!Cesium.defined(viewer.sceneModePicker) || viewer.sceneModePicker.isDestroyed()) {
          if (this.sceneModePicker === true && this.scene3DOnly) {
            throw new Cesium.DeveloperError('options.sceneModePicker is not available when options.scene3DOnly is set to true.');
          }
          if (!this.scene3DOnly && this.sceneModePicker === true) {
            var sceneModePicker = new Cesium.SceneModePicker(toolbar, viewer.scene);
            viewer._sceneModePicker = sceneModePicker;
            resizeToolbar(toolbar, sceneModePicker);
          }
        }
      },
      projectionPicker: function projectionPicker(val) {
        var Cesium = this.Cesium,
            viewer = this.viewer,
            resizeToolbar = this.resizeToolbar;

        var toolbar = (0, _util.getDocumentByClassName)(viewer.container.firstChild.children, 'cesium-viewer-toolbar');
        if (Cesium.defined(viewer.projectionPicker) && !viewer.projectionPicker.isDestroyed() && !val) {
          viewer.projectionPicker.destroy();
          viewer._projectionPicker = undefined;
        } else if (!Cesium.defined(viewer.projectionPicker) || viewer.projectionPicker.isDestroyed()) {
          var projectionPicker = new Cesium.ProjectionPicker(toolbar, viewer.scene);
          viewer._projectionPicker = projectionPicker;
          resizeToolbar(toolbar, projectionPicker);
        }
      },
      baseLayerPicker: function baseLayerPicker(val) {
        var Cesium = this.Cesium,
            viewer = this.viewer,
            resizeToolbar = this.resizeToolbar;

        var toolbar = (0, _util.getDocumentByClassName)(viewer.container.firstChild.children, 'cesium-viewer-toolbar');
        if (Cesium.defined(viewer.baseLayerPicker) && !viewer.baseLayerPicker.isDestroyed() && !val) {
          viewer.baseLayerPicker.destroy();
          viewer._baseLayerPicker = undefined;
          viewer.imageryLayers.removeAll();
          var cesiumPath = this.cesiumPath || this._Cesium().cesiumPath;
          if (cesiumPath.charAt(cesiumPath.length - 1) !== '/') {
            cesiumPath = cesiumPath + '/';
          }
          viewer.imageryLayers.add(new Cesium.ImageryLayer(new Cesium.SingleTileImageryProvider({
            url: cesiumPath + 'Assets/Textures/GlobalBkLayer.jpg'
          })));
        } else if (!Cesium.defined(viewer.baseLayerPicker) || viewer.baseLayerPicker.isDestroyed()) {
          var createBaseLayerPicker = (!Cesium.defined(viewer.globe) || this.globe !== false) && (!Cesium.defined(viewer.baseLayerPicker) || this.baseLayerPicker !== false);

          // >>includeStart('debug', pragmas.debug);
          // If using BaseLayerPicker, imageryProvider is an invalid option
          if (createBaseLayerPicker && Cesium.defined(this.imageryProvider)) {
            throw new Cesium.DeveloperError('options.imageryProvider is not available when using the BaseLayerPicker widget.\nEither specify options.selectedImageryProviderViewModel instead or set options.baseLayerPicker to false.');
          }

          // If not using BaseLayerPicker, selectedImageryProviderViewModel is an invalid option
          if (!createBaseLayerPicker && Cesium.defined(this.selectedImageryProviderViewModel)) {
            throw new Cesium.DeveloperError('options.selectedImageryProviderViewModel is not available when not using the BaseLayerPicker widget.\nEither specify options.imageryProvider instead or set options.baseLayerPicker to true.');
          }

          // If using BaseLayerPicker, terrainProvider is an invalid option
          if (createBaseLayerPicker && Cesium.defined(this.terrainProvider)) {
            throw new Cesium.DeveloperError('options.terrainProvider is not available when using the BaseLayerPicker widget.\nEither specify options.selectedTerrainProviderViewModel instead or set options.baseLayerPicker to false.');
          }

          // If not using BaseLayerPicker, selectedTerrainProviderViewModel is an invalid option
          if (!createBaseLayerPicker && Cesium.defined(this.selectedTerrainProviderViewModel)) {
            throw new Cesium.DeveloperError('options.selectedTerrainProviderViewModel is not available when not using the BaseLayerPicker widget.\nEither specify options.terrainProvider instead or set options.baseLayerPicker to true.');
          }

          if (createBaseLayerPicker) {
            viewer.imageryLayers.removeAll();
            var _cesiumPath = this.cesiumPath || this._Cesium().cesiumPath;
            if (_cesiumPath.charAt(_cesiumPath.length - 1) !== '/') {
              _cesiumPath = _cesiumPath + '/';
            }
            var imageryProviderViewModels = Cesium.defaultValue(this.imageryProviderViewModels, (0, _providerViewModels.createDefaultImageryProviderViewModels)(Cesium, _cesiumPath));
            var terrainProviderViewModels = Cesium.defaultValue(this.terrainProviderViewModels, (0, _providerViewModels.createDefaultTerrainProviderViewModels)(Cesium, _cesiumPath));
            var baseLayerPicker = new Cesium.BaseLayerPicker(toolbar, {
              globe: viewer.scene.globe,
              imageryProviderViewModels: imageryProviderViewModels,
              selectedImageryProviderViewModel: imageryProviderViewModels[0],
              terrainProviderViewModels: terrainProviderViewModels,
              selectedTerrainProviderViewModel: terrainProviderViewModels[0]
            });
            var elements = toolbar.getElementsByClassName('cesium-baseLayerPicker-dropDown');

            var baseLayerPickerDropDown = elements[0];
            viewer._baseLayerPickerDropDown = baseLayerPickerDropDown;
            viewer._baseLayerPicker = baseLayerPicker;
            resizeToolbar(toolbar, baseLayerPicker);
          }
        }
      },
      navigationHelpButton: function navigationHelpButton(val) {
        var Cesium = this.Cesium,
            viewer = this.viewer,
            resizeToolbar = this.resizeToolbar;

        var toolbar = (0, _util.getDocumentByClassName)(viewer.container.firstChild.children, 'cesium-viewer-toolbar');
        if (Cesium.defined(viewer.navigationHelpButton) && !viewer.navigationHelpButton.isDestroyed() && !val) {
          viewer.navigationHelpButton.destroy();
          viewer._navigationHelpButton = undefined;
        } else if (!Cesium.defined(viewer.navigationHelpButton) || viewer.navigationHelpButton.isDestroyed()) {
          var showNavHelp = true;
          try {
            if (Cesium.defined(window.localStorage)) {
              var hasSeenNavHelp = window.localStorage.getItem('cesium-hasSeenNavHelp');
              if (Cesium.defined(hasSeenNavHelp) && Boolean(hasSeenNavHelp)) {
                showNavHelp = false;
              } else {
                window.localStorage.setItem('cesium-hasSeenNavHelp', 'true');
              }
            }
          } catch (e) {}
          var navigationHelpButton = new Cesium.NavigationHelpButton({
            container: toolbar,
            instructionsInitiallyVisible: Cesium.defaultValue(this.navigationInstructionsInitiallyVisible, showNavHelp)
          });
          viewer._navigationHelpButton = navigationHelpButton;
          resizeToolbar(toolbar, navigationHelpButton);
        }
      },
      animation: function animation(val) {
        var Cesium = this.Cesium,
            viewer = this.viewer,
            viewerContainer = this.viewerContainer,
            resizeControl = this.resizeControl;

        if (Cesium.defined(viewer.animation) && !viewer.animation.isDestroyed() && !val) {
          viewer.animation.destroy();
          var animationContainer = (0, _util.getDocumentByClassName)(viewerContainer.children, 'cesium-viewer-animationContainer');
          viewerContainer.removeChild(animationContainer);
          viewer._animation = undefined;
          resizeControl();
        } else if (!Cesium.defined(viewer.animation) || viewer.animation.isDestroyed()) {
          var _animationContainer = document.createElement('div');
          _animationContainer.className = 'cesium-viewer-animationContainer';
          this.viewerContainer.appendChild(_animationContainer);
          var animation = new Cesium.Animation(_animationContainer, new Cesium.AnimationViewModel(viewer.clockViewModel));
          var d = new Date();
          var hour = 0 - d.getTimezoneOffset();
          animation.viewModel.timeFormatter = function (date, viewModel) {
            var dateZone8 = Cesium.JulianDate.addMinutes(date, hour, new Cesium.JulianDate());
            var gregorianDate = Cesium.JulianDate.toGregorianDate(dateZone8);
            var millisecond = Math.round(gregorianDate.millisecond);
            if (Math.abs(viewModel._clockViewModel.multiplier) < 1) {
              return Cesium.sprintf('%02d:%02d:%02d.%03d', gregorianDate.hour, gregorianDate.minute, gregorianDate.second, millisecond);
            }
            return Cesium.sprintf('%02d:%02d:%02d GMT+8', gregorianDate.hour, gregorianDate.minute, gregorianDate.second);
          };
          viewer._animation = animation;
          resizeControl();
        }
      },
      timeline: function timeline(val) {
        var Cesium = this.Cesium,
            viewer = this.viewer,
            viewerContainer = this.viewerContainer,
            onTimelineScrubfunction = this.onTimelineScrubfunction,
            resizeControl = this.resizeControl;

        if (Cesium.defined(viewer.timeline) && !viewer.timeline.isDestroyed() && !val) {
          viewer.timeline.destroy();
          viewer._timeline = undefined;
          var timelineContainer = (0, _util.getDocumentByClassName)(viewerContainer.children, 'cesium-viewer-timelineContainer');
          viewerContainer.removeChild(timelineContainer);
          resizeControl();
        } else if (!Cesium.defined(viewer.timeline) || viewer.timeline.isDestroyed()) {
          var _timelineContainer = document.createElement('div');
          _timelineContainer.className = 'cesium-viewer-timelineContainer';
          viewerContainer.appendChild(_timelineContainer);
          var timeline = new Cesium.Timeline(_timelineContainer, viewer.clock);
          timeline.addEventListener('settime', onTimelineScrubfunction, false);
          timeline.zoomTo(viewer.clock.startTime, viewer.clock.stopTime);
          viewer._timeline = timeline;
          resizeControl();
        }
      },
      fullscreenButton: function fullscreenButton(val) {
        var Cesium = this.Cesium,
            viewer = this.viewer,
            viewerContainer = this.viewerContainer,
            resizeControl = this.resizeControl;

        if (Cesium.defined(viewer.fullscreenButton) && !viewer.fullscreenButton.isDestroyed() && !val) {
          viewer.fullscreenButton.destroy();
          viewer._fullscreenButton = undefined;
          var fullscreenContainer = (0, _util.getDocumentByClassName)(viewerContainer.children, 'cesium-viewer-fullscreenContainer');
          viewerContainer.removeChild(fullscreenContainer);
          resizeControl();
        } else if (!Cesium.defined(viewer.fullscreenButton) || viewer.fullscreenButton.isDestroyed()) {
          var _fullscreenContainer = document.createElement('div');
          _fullscreenContainer.className = 'cesium-viewer-fullscreenContainer';
          viewerContainer.appendChild(_fullscreenContainer);
          var fullscreenButton = new Cesium.FullscreenButton(_fullscreenContainer, document.body);
          viewer._fullscreenButton = fullscreenButton;
          resizeControl();
        }
      },
      'viewer.fullscreenButton.viewModel.isFullscreenEnabled': function viewerFullscreenButtonViewModelIsFullscreenEnabled(val) {
        var Cesium = this.Cesium,
            viewer = this.viewer;

        if (viewer.fullscreenButton) {
          viewer.fullscreenButton.container.style.display = val ? 'block' : 'none';
          var right = 0;
          if (Cesium.defined(viewer.vrButton)) {
            viewer.vrButton.container.style.right = viewer.fullscreenButton.container.clientWidth + 'px';
            right += viewer.fullscreenButton.container.clientWidth;
          }
          if (Cesium.defined(viewer.timeline)) {
            viewer.timeline.container.style.right = right + viewer.fullscreenButton.container.clientWidth + 'px';
            viewer.timeline.resize();
          }
        } else {
          if (Cesium.defined(viewer.vrButton)) {
            viewer.vrButton.container.style.right = 0 + 'px';
          }
        }
      },
      vrButton: function vrButton(val) {
        var Cesium = this.Cesium,
            viewer = this.viewer,
            viewerContainer = this.viewerContainer,
            resizeControl = this.resizeControl,
            enableVRUI = this.enableVRUI;

        if (Cesium.defined(viewer.vrButton) && !viewer.vrButton.isDestroyed() && !val) {
          viewer.vrButton.destroy();
          viewer._vrButton = undefined;
          var vrContainer = (0, _util.getDocumentByClassName)(viewerContainer.children, 'cesium-viewer-vrContainer');
          viewerContainer.removeChild(vrContainer);
          resizeControl();
        } else if (!Cesium.defined(viewer.vrButton) || viewer.vrButton.isDestroyed()) {
          var _vrContainer = document.createElement('div');
          _vrContainer.className = 'cesium-viewer-vrContainer';
          viewerContainer.appendChild(_vrContainer);
          var vrButton = new Cesium.VRButton(_vrContainer, viewer.scene, document.body);
          var viewModelCommand = vrButton.viewModel._command;
          vrButton.viewModel._command = function (VRButtonViewModel) {
            viewModelCommand();
            enableVRUI(viewer, VRButtonViewModel.isVRMode);
          };
          viewer._vrButton = vrButton;
          resizeControl();
        }
      },
      'viewer.vrButton.viewModel.isVREnabled': function viewerVrButtonViewModelIsVREnabled(val) {
        var Cesium = this.Cesium,
            viewer = this.viewer;

        if (viewer.vrButton) {
          viewer.vrButton.container.style.display = val ? 'block' : 'none';
          var right = 0;
          if (Cesium.defined(viewer.fullscreenButton)) {
            viewer.vrButton.container.style.right = viewer.fullscreenButton.container.clientWidth + 'px';
            right += viewer.fullscreenButton.container.clientWidth;
          }
          if (Cesium.defined(viewer.timeline)) {
            viewer.timeline.container.style.right = right + viewer.vrButton.container.clientWidth + 'px';
            viewer.timeline.resize();
          }
        }
      },
      navigation: function navigation(val) {
        var Cesium = this.Cesium,
            viewer = this.viewer,
            viewerContainer = this.viewerContainer,
            resizeControl = this.resizeControl;

        if (Cesium.defined(viewer.navigation) && !val) {
          viewer.navigation.viewModel.eventHelper.removeAll();
          Cesium.destroyObject(viewer.navigation.viewModel);
          viewer._navigation = undefined;
          var navigationContainer = (0, _util.getDocumentByClassName)(viewerContainer.children, 'cesium-viewer-navigationContainer');
          viewerContainer.removeChild(navigationContainer);
        } else if (!Cesium.defined(viewer.navigation)) {
          var _navigationContainer = document.createElement('div');
          _navigationContainer.className = 'cesium-viewer-navigationContainer';
          viewerContainer.appendChild(_navigationContainer);
          var navigation = new Cesium.Navigation({ container: _navigationContainer, viewer: viewer, scene: viewer.scene });
          viewer._navigation = navigation;
          resizeControl();
        }
      },
      sceneMode: function sceneMode(val) {
        var Cesium = this.Cesium,
            viewer = this.viewer;

        if (Cesium.SceneMode.COLUMBUS_VIEW === val || Cesium.SceneMode.MORPHING === val || Cesium.SceneMode.SCENE2D === val || Cesium.SceneMode.SCENE3D === val) {
          viewer.scene.mode = val;
        }
      },
      shouldAnimate: function shouldAnimate(val) {
        var viewer = this.viewer;

        viewer.clock.shouldAnimate = val;
      },
      terrainExaggeration: function terrainExaggeration(val) {
        var viewer = this.viewer;

        viewer.scene._terrainExaggeration = val;
      },
      shadows: function shadows(val) {
        var viewer = this.viewer;

        viewer.scene.shadowMap.enabled = val;
      },

      'camera': {
        handler: function handler(val) {
          console.log(val);
          var Cesium = this.Cesium,
              viewer = this.viewer;

          viewer.camera.setView({
            destination: Cesium.Cartesian3.fromDegrees(val.position.longitude, val.position.latitude, val.position.height),
            orientation: {
              heading: Cesium.Math.toRadians(val.heading),
              pitch: Cesium.Math.toRadians(val.pitch),
              roll: Cesium.Math.toRadians(val.roll)
            }
          });
        },

        deep: true
      },
      'viewer.imageryLayers': function viewerImageryLayers(val) {}
    },
    methods: {
      onTimelineScrubfunction: function onTimelineScrubfunction(e) {
        var clock = e.clock;
        clock.currentTime = e.timeJulian;
        clock.shouldAnimate = false;
      },
      resizeToolbar: function resizeToolbar(parent, child) {
        Array.prototype.slice.call(parent.children).forEach(function (element) {
          switch (element.className) {
            case 'cesium-viewer-geocoderContainer':
              element.customIndex = 1;
              break;
            case 'cesium-button cesium-toolbar-button cesium-home-button':
              element.customIndex = 2;
              break;
            case 'cesium-sceneModePicker-wrapper cesium-toolbar-button':
              element.customIndex = 3;
              break;
            case 'cesium-projectionPicker-wrapper cesium-toolbar-button':
              element.customIndex = 4;
              break;
            case 'cesium-button cesium-toolbar-button':
            case 'cesium-baseLayerPicker-dropDown':
              element.customIndex = 5;
              break;
            case 'cesium-navigationHelpButton-wrapper':
              element.customIndex = 6;
              break;
          }
        });
        var arr = [];
        Array.prototype.slice.call(parent.children).forEach(function (element) {
          arr.push(element);
        });
        arr.sort(function (a, b) {
          return a.customIndex - b.customIndex;
        });
        for (var i = 0; i < arr.length; i++) {
          parent.appendChild(arr[i]);
        }
      },
      resizeControl: function resizeControl() {
        var Cesium = this.Cesium,
            viewer = this.viewer,
            viewerContainer = this.viewerContainer;

        var animationExists = Cesium.defined(viewer._animation);
        var timelineExists = Cesium.defined(viewer._timeline);
        var timeline = viewer._timeline;
        var width = viewerContainer.clientWidth;
        var height = viewerContainer.clientHeight;
        var animationContainer = void 0;
        var animationWidth = 0;
        var creditLeft = 0;
        var creditBottom = 0;

        if (animationExists && window.getComputedStyle(viewer._animation.container).visibility !== 'hidden') {
          var lastWidth = this._lastWidth;
          animationContainer = viewer._animation.container;
          if (width > 900) {
            animationWidth = 169;
            if (lastWidth <= 900) {
              animationContainer.style.width = '169px';
              animationContainer.style.height = '112px';
              viewer._animation.resize();
            }
          } else if (width >= 600) {
            animationWidth = 136;
            if (lastWidth < 600 || lastWidth > 900) {
              animationContainer.style.width = '136px';
              animationContainer.style.height = '90px';
              viewer._animation.resize();
            }
          } else {
            animationWidth = 106;
            if (lastWidth > 600 || lastWidth === 0) {
              animationContainer.style.width = '106px';
              animationContainer.style.height = '70px';
              viewer._animation.resize();
            }
          }
          creditLeft = animationWidth + 5;
        }

        if (timelineExists && window.getComputedStyle(viewer._timeline.container).visibility !== 'hidden') {
          var fullscreenButton = viewer._fullscreenButton;
          var vrButton = viewer._vrButton;
          var timelineContainer = timeline.container;
          var timelineStyle = timelineContainer.style;

          creditBottom = timelineContainer.clientHeight + 3;
          timelineStyle.left = animationWidth + 'px';

          var pixels = 0;
          if (Cesium.defined(viewer.fullscreenButton)) {
            pixels += fullscreenButton.container.clientWidth;
          }
          if (Cesium.defined(vrButton)) {
            pixels += vrButton.container.clientWidth;
          }

          timelineStyle.right = pixels + 'px';
          timeline.resize();
        }

        if (Cesium.defined(viewer.navigation)) {
          var toolbarContainer = (0, _util.getDocumentByClassName)(viewer.container.firstChild.children, 'cesium-viewer-toolbar');
          var navigationContainer = (0, _util.getDocumentByClassName)(viewerContainer.children, 'cesium-viewer-navigationContainer');
          navigationContainer.style.top = toolbarContainer.clientHeight + 'px';

          if (Cesium.defined(viewer.infoBox)) {
            viewer.infoBox.container.firstChild.style.right = navigationContainer.clientWidth + 'px';
          }
        }

        viewer._bottomContainer.style.left = creditLeft + 'px';
        viewer._bottomContainer.style.bottom = creditBottom + 'px';
        this._lastWidth = width;
        this._lastHeight = height;
      },
      enableVRUI: function enableVRUI(viewer, enabled) {
        var Cesium = this.Cesium;

        var geocoder = viewer._geocoder;
        var homeButton = viewer._homeButton;
        var sceneModePicker = viewer._sceneModePicker;
        var projectionPicker = viewer._projectionPicker;
        var baseLayerPicker = viewer._baseLayerPicker;
        var animation = viewer._animation;
        var timeline = viewer._timeline;
        var fullscreenButton = viewer._fullscreenButton;
        var infoBox = viewer._infoBox;
        var selectionIndicator = viewer._selectionIndicator;
        var visibility = enabled ? 'hidden' : 'visible';

        if (Cesium.defined(geocoder)) {
          geocoder.container.style.visibility = visibility;
        }
        if (Cesium.defined(homeButton)) {
          homeButton.container.style.visibility = visibility;
        }
        if (Cesium.defined(sceneModePicker)) {
          sceneModePicker.container.style.visibility = visibility;
        }
        if (Cesium.defined(projectionPicker)) {
          projectionPicker.container.style.visibility = visibility;
        }
        if (Cesium.defined(baseLayerPicker)) {
          baseLayerPicker.container.style.visibility = visibility;
        }
        if (Cesium.defined(animation)) {
          animation.container.style.visibility = visibility;
        }
        if (Cesium.defined(timeline)) {
          timeline.container.style.visibility = visibility;
        }
        if (Cesium.defined(fullscreenButton) && fullscreenButton.viewModel.isFullscreenEnabled) {
          fullscreenButton.container.style.visibility = visibility;
        }
        if (Cesium.defined(infoBox)) {
          infoBox.container.style.visibility = visibility;
        }
        if (Cesium.defined(selectionIndicator)) {
          selectionIndicator.container.style.visibility = visibility;
        }

        if (viewer._container) {
          var right = enabled || !Cesium.defined(fullscreenButton) ? 0 : fullscreenButton.container.clientWidth;
          viewer._vrButton.container.style.right = right + 'px';
          viewer.forceResize();
        }
      },
      init: function init(Cesium) {
        if (this.viewer) {
          return;
        }

        var $el = this.$refs.viewer;
        // for (let $node of this.$slots.default || []) {
        //   if ($node.componentOptions && $node.componentOptions.tag === 'sm-cesium-view') {
        //     this.hasSmCesiumView = true
        //     $el = $node.elm
        //   }
        // }
        var viewer = new Cesium.Viewer($el, {
          animation: this.animation,
          baseLayerPicker: this.baseLayerPicker,
          fullscreenButton: this.fullscreenButton,
          vrButton: this.vrButton,
          geocoder: this.geocoder,
          homeButton: this.homeButton,
          infoBox: this.infoBox,
          sceneModePicker: this.sceneModePicker,
          selectionIndicator: this.selectionIndicator,
          timeline: this.timeline,
          navigationHelpButton: this.navigationHelpButton,
          navigationInstructionsInitiallyVisible: this.navigationInstructionsInitiallyVisible,
          scene3DOnly: this.scene3DOnly,
          shouldAnimate: this.shouldAnimate,
          clockViewModel: this.clockViewModel,
          selectedImageryProviderViewModel: this.selectedImageryProviderViewModel,
          imageryProviderViewModels: this.imageryProviderViewModels,
          selectedTerrainProviderViewModel: this.selectedTerrainProviderViewModel,
          terrainProviderViewModels: this.terrainProviderViewModels,
          imageryProvider: this.imageryProvider,
          terrainProvider: this.terrainProvider,
          skyBox: this.skyBox,
          skyAtmosphere: this.skyAtmosphere,
          fullscreenElement: this.fullscreenElement,
          useDefaultRenderLoop: this.useDefaultRenderLoop,
          targetFrameRate: this.targetFrameRate,
          showRenderLoopErrors: this.showRenderLoopErrors,
          automaticallyTrackDataSourceClocks: this.automaticallyTrackDataSourceClocks,
          contextOptions: this.contextOptions,
          sceneMode: this.sceneMode,
          mapProjection: this.mapProjection,
          globe: this.globe,
          orderIndependentTranslucency: this.orderIndependentTranslucency,
          creditContainer: this.creditContainer,
          creditViewport: this.creditViewport,
          dataSources: this.dataSources,
          terrainExaggeration: this.terrainExaggeration,
          shadows: this.shadows,
          terrainShadows: this.terrainShadows,
          mapMode2D: this.mapMode2D,
          projectionPicker: this.projectionPicker,
          requestRenderMode: this.requestRenderMode,
          maximumRenderTimeChange: this.maximumRenderTimeChange,
          navigation: this.navigation
        });
        this.viewer = viewer;
        // options待完善
        _bindEvent2.default.call(this, viewer);
        // bindEvents.call(this, viewer.scene, sceneEventList)
        // bindEvents.call(this, viewer.dataSources, dataSourcesEventList)
        // viewer.reset()
        if (Cesium.defined(this.camera)) {
          viewer.camera.setView({
            destination: Cesium.Cartesian3.fromDegrees(this.camera.position.longitude, this.camera.position.latitude, this.camera.position.height),
            orientation: {
              heading: Cesium.Math.toRadians(this.camera.heading),
              pitch: Cesium.Math.toRadians(this.camera.pitch),
              roll: Cesium.Math.toRadians(this.camera.roll)
            }
          });
        }
        if (Cesium.defined(viewer.animation)) {
          var d = new Date();
          var hour = 0 - d.getTimezoneOffset();
          viewer.animation.viewModel.timeFormatter = function (date, viewModel) {
            var dateZone8 = Cesium.JulianDate.addMinutes(date, hour, new Cesium.JulianDate());
            var gregorianDate = Cesium.JulianDate.toGregorianDate(dateZone8);
            var millisecond = Math.round(gregorianDate.millisecond);
            if (Math.abs(viewModel._clockViewModel.multiplier) < 1) {
              return Cesium.sprintf('%02d:%02d:%02d.%03d', gregorianDate.hour, gregorianDate.minute, gregorianDate.second, millisecond);
            }
            return Cesium.sprintf('%02d:%02d:%02d GMT+8', gregorianDate.hour, gregorianDate.minute, gregorianDate.second);
          };
        }
        this.$emit('ready', { Cesium: Cesium, viewer: viewer });
        this.viewerContainer = this.$refs.viewer.firstChild;
        this.resizeControl();
        window.someObject = this.someObject;
      },
      initViewer: function initViewer(Cesium) {
        this.Cesium = Cesium;
        this.init(Cesium);
      },
      getCesiumScript: function getCesiumScript() {
        if (!global.Cesium) {
          var cesiumPath = this.cesiumPath || this._Cesium().cesiumPath;
          if (cesiumPath.charAt(cesiumPath.length - 1) !== '/') {
            cesiumPath = cesiumPath + '/';
          }
          global.Cesium = {};
          global.Cesium._preloader = new Promise(function (resolve, reject) {
            global._initCesium = function () {
              resolve(global.Cesium);
              global.Cesium._preloader = null;
              global._initCesium = null;
            };

            var $link = document.createElement('link');
            $link.rel = 'stylesheet';
            global.document.head.appendChild($link);
            $link.href = cesiumPath + 'Widgets/widgets.css';

            var $script = document.createElement('script');
            global.document.body.appendChild($script);
            $script.src = cesiumPath + 'Cesium.js';
            $script.onload = function () {
              global._initCesium();
            };

            var $scriptZlib = document.createElement('script');
            global.document.body.appendChild($scriptZlib);
            $scriptZlib.src = cesiumPath + '/Workers/zlib.min.js';
          });
          return global.Cesium._preloader;
        } else if (!global.Cesium._preloader) {
          return Promise.resolve(global.Cesium);
        } else {
          return global.Cesium._preloader;
        }
      },
      reset: function reset() {
        var getCesiumScript = this.getCesiumScript,
            initViewer = this.initViewer;

        getCesiumScript().then(initViewer);
      }
    },
    mounted: function mounted() {
      this.reset();
    },
    beforeDestroy: function beforeDestroy() {},
    data: function data() {
      return {
        viewer: null,
        viewerContainer: null
      };
    }
  };
  module.exports = exports['default'];
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = function normalizeComponent (
  rawScriptExports,
  compiledTemplate,
  scopeId,
  cssModules
) {
  var esModule
  var scriptExports = rawScriptExports = rawScriptExports || {}

  // ES6 modules interop
  var type = typeof rawScriptExports.default
  if (type === 'object' || type === 'function') {
    esModule = rawScriptExports
    scriptExports = rawScriptExports.default
  }

  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (compiledTemplate) {
    options.render = compiledTemplate.render
    options.staticRenderFns = compiledTemplate.staticRenderFns
  }

  // scopedId
  if (scopeId) {
    options._scopeId = scopeId
  }

  // inject cssModules
  if (cssModules) {
    var computed = options.computed || (options.computed = {})
    Object.keys(cssModules).forEach(function (key) {
      var module = cssModules[key]
      computed[key] = function () { return module }
    })
  }

  return {
    esModule: esModule,
    exports: scriptExports,
    options: options
  }
}


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    ref: "viewer",
    staticStyle: {
      "width": "100%",
      "height": "100%",
      "margin": "0",
      "padding": "0",
      "overflow": "hidden"
    },
    attrs: {
      "id": "cesiumContainer"
    }
  }, [_vm._t("default")], 2)
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-7905b500", module.exports)
  }
}

/***/ }),
/* 10 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ })
/******/ ]);
});